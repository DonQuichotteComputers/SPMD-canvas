


************************
2017/05/28, personal doc
************************


1/ branche le ventilo ou mets ta //A derriere l'UC : ventilee.
   
2/ la //A est branchee en Ethernet sur ta box ; si tu lances "Outil systeme", "Explorateur Zeroconf d'Avahi", il te donne l'adresse IP,
   en l'occurrence 192.168.0.11
   
   => tu gardes ta connection Internet tout en travaillant sur la //A :D

3/ lance deux terminaux :
   . psftp parallella@192.168.0.11 -pw parallella
   <!> Le mot de passe est le meme que pour ton UC.
   
   => te permet de COPIER DES FICHIERS
      Tu edites sur ta machine locale ; tu copies sur ta //A avec "put e_main.c" par exemple, ou "mput *main.c" pour en copier 2 a la fois.
   
   . ssh parallella@192.168.011
   <!> Le mot de passe est le meme que pour ton UC.
   
   => te permet d'executer tous les pgm sur la //A

4/ src tmp dans :

  parallella@parallella:~/parallella-examples/tmp/
  
5/ tools
  
***

e-objdump -d Debug/e_dbg3.elf

***

http://gcc.parallella.org/

***

parallella-examples github

  Community created example Parallella projects.
  Contents
  Contributing

  Contributions to this repository are welcomed.

  To submit a project for inclusion:

    Fork this repository
    Create a new sub-directory
    Add your project files and ensure the headers state GPL or BSD license
    Add a README.md file (see the .skeleton directory for a template)
    Submit a pull request

  Note

    The project must build, run and serve as a useful example
    Basic documentation must be included, e.g. dependencies, building and use
    Only GPLv3 and BSD 3-clause licensed code will be accepted


***

Create a folder inside github...

http://stackoverflow.com/questions/18773598/creating-folders-inside-github-com-repo-without-using-git

<!>
Do NOT insert empty folders, github will delete them :(
  => Debug/void.txt
  
***

<!> mon 1er overflow ! ca depasse les 32 ko...


parallella@parallella:~$ ./build.sh e2 |more
/opt/adapteva/esdk.2015.1/tools/e-gnu.armv7l/bin/../lib/gcc/epiphany-elf/4.8.2/../../../../epiphany-elf/bin/ld: Debug/e_e2.elf section `.bss' will not fit in region `INTERNAL_RAM'
/opt/adapteva/esdk.2015.1/tools/e-gnu.armv7l/bin/../lib/gcc/epiphany-elf/4.8.2/../../../../epiphany-elf/bin/ld: section .data_bank3 loaded at [00006000,00006563] overlaps section .text loaded at [000009c0,00007077]
/opt/adapteva/esdk.2015.1/tools/e-gnu.armv7l/bin/../lib/gcc/epiphany-elf/4.8.2/../../../../epiphany-elf/bin/ld: region `INTERNAL_RAM' overflowed by 376 bytes
collect2: error: ld returned 1 exit status

***

OpenCL
https://parallella.org/forums/viewtopic.php?f=18&t=3657

***

parallella@parallella:~$ e-gcc --help=optimizers
The following options control optimizations:
  -O<number>                  Set optimization level to <number>
  -Ofast                      Optimize for speed disregarding exact standards
                              compliance
  -Og                         Optimize for debugging experience rather than
                              speed or size
  -Os                         Optimize for space rather than speed
  -faggressive-loop-optimizations Aggressively optimize loops using language
                              constraints
  -falign-functions           Align the start of functions
  -falign-jumps               Align labels which are only reached by jumping
  -falign-labels              Align all labels
  -falign-loops               Align the start of loops
  -fasynchronous-unwind-tables Generate unwind tables that are exact at each
                              instruction boundary
  -fbranch-count-reg          Replace add, compare, branch with branch on count
                              register
  -fbranch-probabilities      Use profiling information for branch probabilities
  -fbranch-target-load-optimize Perform branch target load optimization before
                              prologue / epilogue threading
  -fbranch-target-load-optimize2 Perform branch target load optimization after
                              prologue / epilogue threading
  -fbtr-bb-exclusive          Restrict target load migration not to re-use
                              registers in any basic block
  -fcaller-saves              Save registers around function calls
  -fcombine-stack-adjustments Looks for opportunities to reduce stack
                              adjustments and stack references.
  -fcommon                    Do not put uninitialized globals in the common
                              section
  -fcompare-elim              Perform comparison elimination after register
                              allocation has finished
  -fconserve-stack            Do not perform optimizations increasing
                              noticeably stack usage
  -fcprop-registers           Perform a register copy-propagation optimization
                              pass
  -fcrossjumping              Perform cross-jumping optimization
  -fcse-follow-jumps          When running CSE, follow jumps to their targets
  -fcx-fortran-rules          Complex multiplication and division follow
                              Fortran rules
  -fcx-limited-range          Omit range reduction step when performing complex
                              division
  -fdata-sections             Place data items into their own section
  -fdce                       Use the RTL dead code elimination pass
  -fdefer-pop                 Defer popping functions args from stack until
                              later
  -fdelayed-branch            Attempt to fill delay slots of branch instructions
  -fdelete-null-pointer-checks Delete useless null pointer checks
  -fdevirtualize              Try to convert virtual calls to direct ones.
  -fdse                       Use the RTL dead store elimination pass
  -fearly-inlining            Perform early inlining
  -fexceptions                Enable exception handling
  -fexpensive-optimizations   Perform a number of minor, expensive optimizations
  -ffinite-math-only          Assume no NaNs or infinities are generated
  -ffloat-store               Don't allocate floats and doubles in extended-
                              precision registers
  -fforward-propagate         Perform a forward propagation pass on RTL
  -fgcse                      Perform global common subexpression elimination
  -fgcse-after-reload         Perform global common subexpression elimination
                              after register allocation has finished
  -fgcse-las                  Perform redundant load after store elimination in
                              global common subexpression elimination
  -fgcse-lm                   Perform enhanced load motion during global common
                              subexpression elimination
  -fgcse-sm                   Perform store motion after global common
                              subexpression elimination
  -fgraphite-identity         Enable Graphite Identity transformation
  -fguess-branch-probability  Enable guessing of branch probabilities
  -fhandle-exceptions         This switch lacks documentation
  -fhoist-adjacent-loads      Enable hoisting adjacent loads to encourage
                              generating conditional move instructions
  -fif-conversion             Perform conversion of conditional jumps to
                              branchless equivalents
  -fif-conversion2            Perform conversion of conditional jumps to
                              conditional execution
  -finline                    Enable inlining of function declared "inline",
                              disabling disables all inlining
  -finline-atomics            Inline __atomic operations when a lock free
                              instruction sequence is available.
  -finline-functions          Integrate functions not declared "inline" into
                              their callers when profitable
  -finline-functions-called-once Integrate functions only required by their
                              single caller
  -finline-small-functions    Integrate functions into their callers when code
                              size is known not to grow
  -fipa-cp                    Perform Interprocedural constant propagation
  -fipa-cp-clone              Perform cloning to make Interprocedural constant
                              propagation stronger
  -fipa-profile               Perform interprocedural profile propagation
  -fipa-pta                   Perform interprocedural points-to analysis
  -fipa-pure-const            Discover pure and const functions
  -fipa-reference             Discover readonly and non addressable static
                              variables
  -fipa-sra                   Perform interprocedural reduction of aggregates
  -fira-hoist-pressure        Use IRA based register pressure calculation in
                              RTL hoist optimizations.
  -fivopts                    Optimize induction variables on trees
  -fjump-tables               Use jump tables for sufficiently large switch
                              statements
  -floop-block                Enable Loop Blocking transformation
  -floop-interchange          Enable Loop Interchange transformation
  -floop-nest-optimize        Enable the ISL based loop nest optimizer
  -floop-parallelize-all      Mark all loops as parallel
  -floop-strip-mine           Enable Loop Strip Mining transformation
  -fmath-errno                Set errno after built-in math functions
  -fmerge-all-constants       Attempt to merge identical constants and constant
                              variables
  -fmerge-constants           Attempt to merge identical constants across
                              compilation units
  -fmodulo-sched              Perform SMS based modulo scheduling before the
                              first scheduling pass
  -fmove-loop-invariants      Move loop invariant computations out of loops
  -fnon-call-exceptions       Support synchronous non-call exceptions
  -fnothrow-opt               Treat a throw() exception specification as
                              noexcept to improve code size
  -fomit-frame-pointer        When possible do not generate stack frames
  -fopt-info                  Enable all optimization info dumps on stderr
  -foptimize-register-move    Do the full register move optimization pass
  -foptimize-sibling-calls    Optimize sibling and tail recursive calls
  -foptimize-strlen           Enable string length optimizations on trees
  -fpack-struct               Pack structure members together without holes
  -fpack-struct=<number>      Set initial maximum structure member alignment
  -fpeel-loops                Perform loop peeling
  -fpeephole                  Enable machine specific peephole optimizations
  -fpeephole2                 Enable an RTL peephole pass before sched2
  -fpredictive-commoning      Run predictive commoning optimization.
  -fprefetch-loop-arrays      Generate prefetch instructions, if available, for
                              arrays in loops
  -freg-struct-return         Return small aggregates in registers
  -fregmove                   Enables a register move optimization
  -frename-registers          Perform a register renaming optimization pass
  -freorder-blocks            Reorder basic blocks to improve code placement
  -freorder-blocks-and-partition Reorder basic blocks and partition into hot
                              and cold sections
  -freorder-functions         Reorder functions to improve code placement
  -frerun-cse-after-loop      Add a common subexpression elimination pass after
                              loop optimizations
  -freschedule-modulo-scheduled-loops Enable/Disable the traditional scheduling
                              in loops that already passed modulo scheduling
  -frounding-math             Disable optimizations that assume default FP
                              rounding behavior
  -frtti                      Generate run time type descriptor information
  -fsched-critical-path-heuristic Enable the critical path heuristic in the
                              scheduler
  -fsched-dep-count-heuristic Enable the dependent count heuristic in the
                              scheduler
  -fsched-group-heuristic     Enable the group heuristic in the scheduler
  -fsched-interblock          Enable scheduling across basic blocks
  -fsched-last-insn-heuristic Enable the last instruction heuristic in the
                              scheduler
  -fsched-pressure            Enable register pressure sensitive insn scheduling
  -fsched-rank-heuristic      Enable the rank heuristic in the scheduler
  -fsched-spec                Allow speculative motion of non-loads
  -fsched-spec-insn-heuristic Enable the speculative instruction heuristic in
                              the scheduler
  -fsched-spec-load           Allow speculative motion of some loads
  -fsched-spec-load-dangerous Allow speculative motion of more loads
  -fsched-stalled-insns       Allow premature scheduling of queued insns
  -fsched-stalled-insns-dep   Set dependence distance checking in premature
                              scheduling of queued insns
  -fsched2-use-superblocks    If scheduling post reload, do superblock
                              scheduling
  -fschedule-insns            Reschedule instructions before register allocation
  -fschedule-insns2           Reschedule instructions after register allocation
  -fsection-anchors           Access data in the same section from shared
                              anchor points
  -fsel-sched-pipelining      Perform software pipelining of inner loops during
                              selective scheduling
  -fsel-sched-pipelining-outer-loops Perform software pipelining of outer loops
                              during selective scheduling
  -fsel-sched-reschedule-pipelined Reschedule pipelined regions without
                              pipelining
  -fselective-scheduling      Schedule instructions using selective scheduling
                              algorithm
  -fselective-scheduling2     Run selective scheduling after reload
  -fshort-double              Use the same size for double as for float
  -fshort-enums               Use the narrowest integer type possible for
                              enumeration types
  -fshort-wchar               Force the underlying type for "wchar_t" to be
                              "unsigned short"
  -fshrink-wrap               Emit function prologues only before parts of the
                              function that need it, rather than at the top of
                              the function.
  -fsignaling-nans            Disable optimizations observable by IEEE
                              signaling NaNs
  -fsigned-zeros              Disable floating point optimizations that ignore
                              the IEEE signedness of zero
  -fsingle-precision-constant Convert floating point constants to single
                              precision constants
  -fsplit-ivs-in-unroller     Split lifetimes of induction variables when loops
                              are unrolled
  -fsplit-wide-types          Split wide types into independent registers
  -fstrict-aliasing           Assume strict aliasing rules apply
  -fstrict-enums              Assume that values of enumeration type are always
                              within the minimum range of that type
  -fthread-jumps              Perform jump threading optimizations
  -fno-threadsafe-statics     Do not generate thread-safe code for initializing
                              local statics
  -ftoplevel-reorder          Reorder top level functions, variables, and asms
  -ftrapping-math             Assume floating-point operations can trap
  -ftrapv                     Trap for signed overflow in addition, subtraction
                              and multiplication
  -ftree-bit-ccp              Enable SSA-BIT-CCP optimization on trees
  -ftree-builtin-call-dce     Enable conditional dead code elimination for
                              builtin calls
  -ftree-ccp                  Enable SSA-CCP optimization on trees
  -ftree-ch                   Enable loop header copying on trees
  -ftree-coalesce-inlined-vars Enable coalescing of copy-related user variables
                              that are inlined
  -ftree-coalesce-vars        Enable coalescing of all copy-related user
                              variables
  -ftree-copy-prop            Enable copy propagation on trees
  -ftree-copyrename           Replace SSA temporaries with better names in
                              copies
  -ftree-cselim               Transform condition stores into unconditional ones
  -ftree-dce                  Enable SSA dead code elimination optimization on
                              trees
  -ftree-dominator-opts       Enable dominator optimizations
  -ftree-dse                  Enable dead store elimination
  -ftree-forwprop             Enable forward propagation on trees
  -ftree-fre                  Enable Full Redundancy Elimination (FRE) on trees
  -ftree-loop-distribute-patterns Enable loop distribution for patterns
                              transformed into a library call
  -ftree-loop-distribution    Enable loop distribution on trees
  -ftree-loop-if-convert      Convert conditional jumps in innermost loops to
                              branchless equivalents
  -ftree-loop-if-convert-stores Also if-convert conditional jumps containing
                              memory writes
  -ftree-loop-im              Enable loop invariant motion on trees
  -ftree-loop-ivcanon         Create canonical induction variables in loops
  -ftree-loop-optimize        Enable loop optimizations on tree level
  -ftree-lrs                  Perform live range splitting during the SSA-
                              >normal pass
  -ftree-partial-pre          In SSA-PRE optimization on trees, enable partial-
                              partial redundancy elimination
  -ftree-phiprop              Enable hoisting loads from conditional pointers.
  -ftree-pre                  Enable SSA-PRE optimization on trees
  -ftree-pta                  Perform function-local points-to analysis on
                              trees.
  -ftree-reassoc              Enable reassociation on tree level
  -ftree-scev-cprop           Enable copy propagation of scalar-evolution
                              information.
  -ftree-sink                 Enable SSA code sinking on trees
  -ftree-slp-vectorize        Enable basic block vectorization (SLP) on trees
  -ftree-slsr                 Perform straight-line strength reduction
  -ftree-sra                  Perform scalar replacement of aggregates
  -ftree-switch-conversion    Perform conversions of switch initializations.
  -ftree-tail-merge           Enable tail merging on trees
  -ftree-ter                  Replace temporary expressions in the SSA->normal
                              pass
  -ftree-vect-loop-version    Enable loop versioning when doing loop
                              vectorization on trees
  -ftree-vectorize            Enable loop vectorization on trees
  -ftree-vrp                  Perform Value Range Propagation on trees
  -funit-at-a-time            Compile whole compilation unit at a time
  -funroll-all-loops          Perform loop unrolling for all loops
  -funroll-loops              Perform loop unrolling when iteration count is
                              known
  -funsafe-loop-optimizations Allow loop optimizations to assume that the loops
                              behave in normal way
  -funsafe-math-optimizations Allow math optimizations that may violate IEEE or
                              ISO standards
  -funswitch-loops            Perform loop unswitching
  -funwind-tables             Just generate unwind tables for exception handling
  -fvar-tracking              Perform variable tracking
  -fvar-tracking-assignments  Perform variable tracking by annotating
                              assignments
  -fvar-tracking-assignments-toggle Toggle -fvar-tracking-assignments
  -fvar-tracking-uninit       Perform variable tracking and also tag variables
                              that are uninitialized
  -fvariable-expansion-in-unroller Apply variable expansion when loops are
                              unrolled
  -fvect-cost-model           Enable use of cost model in vectorization
  -fvpt                       Use expression value profiles in optimizations
  -fweb                       Construct webs and split unrelated uses of single
                              variable
  -fwhole-program             Perform whole program optimizations
  -fwrapv                     Assume signed arithmetic overflow wraps around

parallella@parallella:~$ 



-falign-loops=8
-falign-functions=8

For the Epiphany architecture, some useful optimization options are -falign-loops=8
and -falign-functions=8 . These options direct the compiler to generate code, where the
first instructions in the body of a loop or in a function are double-word aligned. Thus, the
processor’s alignment buffer is kept full from the first fetch after a branch (pipeline
flush).



***

Compris la doc SDK e_read() cote DEVICE ! 
#include “e-lib.h”
void *e_read(void *remote, void *dst, unsigned row, unsigned col, const void *src, size_t bytes);

2 CAS pour remote : 
e_read(e_group_config, ...) => coeur src specifie par row/col ds le grp de travail appelant  (donc 0,0 si tu travailles en SPMD = Single Program Multiple Data)
e_read(e_mem_config, ...)   => le param 'src' sera une adresse globale -- relative a l'adresse de base de la memoire externe... va comprendre !
Mais, d'apres :
  int e_alloc(e_mem_t *mbuf, off_t base, size_t size);
  Description
  This function defines a buffer in external memory. The buffer is defined in terms of the relative from the beginning of the external memory segment, defined in the e_init() call. 
  The argument base defines the offset, starting at 0.
on en deduit que l'adresse de base est ZERO (e_init(NULL); est plutot std !)

***
